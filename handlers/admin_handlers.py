from aiogram import Router, Bot
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram import F
import logging
import re
import sqlite3
from aiogram.enums.parse_mode import ParseMode
from aiogram.client.bot import DefaultBotProperties 

from states.states import FSMStates
from functions.functions import update_user_balance
from handlers.product_service import add_product
from keyboards.keyboards import get_admin_keyboard, main_keyboard
from config import config


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=config.BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
admin_router = Router()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def is_admin(user_id: int) -> bool:
    return user_id in config.admin_ids


@admin_router.message(F.text == "üõ† –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def add_product_handler(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'")
    
    await state.set_state(FSMStates.waiting_for_product_data)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`ip:login:pass:cores:ram:ssd:geo:cost`")


@admin_router.message(FSMStates.waiting_for_product_data)
async def process_product_data(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–æ–≤–∞—Ä: {message.text}")

    products = message.text.strip().splitlines()

    added_count = 0
    for product in products:
        match = re.match(r"^(.*?):(.*?):(.*?):(\d+):(\d+):(\d+):([A-Za-z]+):([\d.]+)$", product)
        if match:
            ip, login, password, cores, ram, ssd, geo, price = match.groups()

            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {ip}, {login}, {password}, {cores}, {ram}, {ssd}, {geo}, {price}")

            try:
                add_product(ip, login, password, int(cores), int(ram), int(ssd), geo.upper(), float(price))
                added_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
                await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
                continue
        else:
            await message.answer(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–≤–∞—Ä–∞: {product}")
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–≤–∞—Ä–∞: {product}")

    if added_count > 0:
        await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {added_count}")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.")

    await state.clear()


@admin_router.message(F.text == "üí≥ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def change_balance_handler(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'")

    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ü—Ä–∏–º–µ—Ä: `123456789 100.50`")

    await state.set_state(FSMStates.waiting_for_balance_update)


@admin_router.message(FSMStates.waiting_for_balance_update)
async def process_balance_update(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return


    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: {message.text}")


    try:
        user_id_str, new_balance_str = message.text.split()
        user_id = int(user_id_str)
        new_balance = float(new_balance_str)

        update_user_balance(user_id, new_balance)
        await message.answer(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {new_balance}$.")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ü—Ä–∏–º–µ—Ä: `123456789 100.50`")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")

    await state.clear()


@admin_router.message(F.text =="üõ† –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def delete_product_handler(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞."""
    if not await is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return


    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä'")


    await state.set_state(FSMStates.waiting_for_product_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é(–ø—Ä–∏–º–µ—Ä: 1, 2, 3), –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å: ")


@admin_router.message(FSMStates.waiting_for_product_id)
async def process_deleting_products(message: Message, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ ID –∏ –ø–µ—Ä–µ–Ω—É–º–µ—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤."""
    ids_text = message.text.strip()

    try:
        product_ids = [int(id.strip()) for id in ids_text.split(',')]

        conn = sqlite3.connect('vds_shop.db')
        cursor = conn.cursor()

        deleted_count = 0
        for product_id in product_ids:
            cursor.execute("SELECT * FROM products WHERE id = ?", (product_id,))
            product = cursor.fetchone()

            if product:
                cursor.execute("DELETE FROM products WHERE id = ?", (product_id,))
                deleted_count += 1

        conn.commit()

        if deleted_count > 0:
            await message.answer(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} —Ç–æ–≤–∞—Ä–∞(–æ–≤).")
        else:
            await message.answer("–¢–æ–≤–∞—Ä—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")



    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID —Ç–æ–≤–∞—Ä–æ–≤ (—Ü–µ–ª—ã–µ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç–æ–π).")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")


    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_keyboard())

    await state.clear()


@admin_router.message(F.text =="üìù –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤")
async def list_products_handler(message: Message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    if not await is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return


    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤")


    conn = sqlite3.connect('vds_shop.db')
    cursor = conn.cursor()

    cursor.execute("SELECT * FROM products")
    products = cursor.fetchall()
    


    if products:
        product_list = "\n".join([f"{item[0]}:{item[1]}:{item[2]}:{item[3]}:{item[4]}:{item[5]}:{item[6]}:{item[7]}:{item[8]}"
                                for item in products])
        await message.answer(f"–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n\n{product_list}")
    else:
        await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
    
@admin_router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é."""
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_keyboard(message.from_user.id))
    
    await state.clear()


@admin_router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥")
async def add_promo_code_handler(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `–∫–æ–¥:—Å–∫–∏–¥–∫–∞:–ª–∏–º–∏—Ç`")

    await state.set_state(FSMStates.get_promo)


@admin_router.message(FSMStates.get_promo)
async def get_promo_code_handler(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    try:
        code, discount, usage_limit = message.text.split(":")
        conn = sqlite3.connect("vds_shop.db")
        cursor = conn.cursor()
        cursor.execute("INSERT INTO promo_codes (code, discount, usage_limit) VALUES (?, ?, ?)", (code, float(discount), int(usage_limit)))
        conn.commit()
        await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")


@admin_router.message(F.text == "–†–∞—Å—Å—ã–ª–∫–∞")
async def broadcast_message(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–∂–∏–¥–∞–Ω–∏—é —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    await state.set_state(FSMStates.waiting_for_broadcast)


@admin_router.message(FSMStates.waiting_for_broadcast)
async def process_broadcast_message(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    broadcast_message = message.text.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ FSMContext
    await state.update_data(broadcast_message=broadcast_message)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('vds_shop.db')
    cursor = conn.cursor()
    cursor.execute("SELECT telegram_id FROM users")
    users = cursor.fetchall()
    
    if users:
        for user in users:
            user_id = user[0]
            try:
                await message.bot.send_message(user_id, broadcast_message)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    await state.clear()