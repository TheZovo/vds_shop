from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram import F
import sqlite3

from states.states import FSMStates, TopUpStates
from payments.yoo import create_payment
from handlers.admin_handlers import admin_router
from handlers.main_handlers import main_router
from keyboards.keyboards import main_keyboard, back_to_main, crypto_keyboard, back_keyboard, profile_inline_keyboard, product_buy_keyboard, get_admin_keyboard, create_products_keyboard, get_payment_inline_keyboard
from functions.functions import apply_promo_code, get_flag, get_user_balance, update_user_balance
from payments.cryptomus import create_crypto_invoice

router = Router()


router.include_routers(admin_router, main_router)


@router.callback_query(F.data == "top_up")
async def topup_handler(callback: CallbackQuery):
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=get_payment_inline_keyboard())
    await callback.answer()

@router.callback_query(F.data == "topup_yoo")
async def topup_yoo(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ RUB:")
    await state.set_state(TopUpStates.waiting_for_rub_amount)
    await callback.answer()

@router.message(TopUpStates.waiting_for_rub_amount)
async def process_yoo_amount(message: Message, state: FSMContext):
    try:
        amount_rub = float(message.text)
        if amount_rub < 10:
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî 10 RUB. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –µ—â–µ —Ä–∞–∑.")
            return

        payment_info, amount_usd = create_payment(amount_rub, message.from_user.id)
        payment_url = payment_info["confirmation"]["confirmation_url"]

        await message.answer(
            f"üí∞ **–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ YooKassa**\n\nüíµ –°—É–º–º–∞: {amount_rub} RUB (~{amount_usd} USD)\nüîó [–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã]({payment_url})", 
            disable_web_page_preview=True
        )
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
    await state.clear()

@router.callback_query(F.data == "topup_crypto")
async def topup_crypto(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ USD:")
    await state.set_state(TopUpStates.waiting_for_crypto_amount)
    await callback.answer()

@router.message(TopUpStates.waiting_for_crypto_amount)
async def process_crypto_amount(message: Message, state: FSMContext):
    try:
        amount_usd = float(message.text)
        if amount_usd < 1:
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî 1 USD. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –µ—â–µ —Ä–∞–∑.")
            return

        await state.update_data(amount_usd=amount_usd)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:", reply_markup=crypto_keyboard)
        await state.set_state(TopUpStates.waiting_for_crypto_choice)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")

@router.callback_query(F.data.startswith("crypto_"))
async def process_crypto_choice(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    amount_usd = user_data.get("amount_usd")
    crypto_currency = callback.data.split("_")[1]

    invoice_url = create_crypto_invoice(amount_usd, crypto_currency, callback.from_user.id)
    if invoice_url:
        await callback.message.answer(f"–û–ø–ª–∞—Ç–∏—Ç–µ {amount_usd} USD –≤ {crypto_currency} –ø–æ —Å—Å—ã–ª–∫–µ: {invoice_url}")
    else:
        await callback.message.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞.")
    await state.clear()

@router.callback_query(F.data == "back_to_profile")
async def back_to_profile(callback: CallbackQuery):
    balance = get_user_balance(callback.from_user.id)
    text = f"–í–∞—à ID: {callback.from_user.id}\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} USD"
    await callback.message.edit_text(text, reply_markup=profile_inline_keyboard)
    await callback.answer()

@router.callback_query(F.data == "back_to_topup")
async def back_to_topup(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=get_payment_inline_keyboard())
    await callback.answer()



@router.callback_query(F.data == "products_back")
async def products_back(callback: CallbackQuery):
    keyboard = create_products_keyboard(page=0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("page_"))
async def page_navigation(callback_query: CallbackQuery):
    page = int(callback_query.data.split("_")[1])
    keyboard = create_products_keyboard(page)
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=keyboard)
    await callback_query.answer()

@router.callback_query(F.data.startswith("product_"))
async def product_details(callback_query: CallbackQuery):
    product_id = int(callback_query.data.split("_")[1])

    conn = sqlite3.connect('vds_shop.db')
    cursor = conn.cursor()

    cursor.execute("SELECT ip, login, password, cores, ram, ssd, geo, price FROM products WHERE id = ?", (product_id,))
    product = cursor.fetchone()


    if product:
        ip, login, password, cores, ram, ssd, geo, price = product
        product_details = (
            f"–¢–æ–≤–∞—Ä #{product_id}:\n"
            f"–û–ó–£: {ram}GB\n"
            f"SSD: {ssd}GB\n"
            f"–Ø–¥—Ä–∞: {cores}\n"
            f"–ì–µ–æ: {geo}\n"
            f"–¶–µ–Ω–∞: {price} $"
        )
        await callback_query.message.edit_text(product_details, reply_markup=product_buy_keyboard(product_id))
        await callback_query.answer()

@router.callback_query(F.data.startswith("buy_"))
async def buy_product(callback_query: CallbackQuery):
    product_id = int(callback_query.data.split("_")[1])
    user_id = callback_query.from_user.id
    
    conn = sqlite3.connect('vds_shop.db')
    cursor = conn.cursor()
    
    cursor.execute("SELECT ip, login, password, cores, ram, ssd, geo, price FROM products WHERE id = ?", (product_id,))
    product = cursor.fetchone()
    
    if not product:
        await callback_query.message.edit_text("–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –∫—É–ø–ª–µ–Ω.")
        return
    
    ip, login, password, cores, ram, ssd, geo, price = product
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    price = apply_promo_code(user_id, price)
    
    balance = get_user_balance(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    if balance >= price:
        # –ï—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –±—ã–ª, –æ–Ω —É–∂–µ –∏–∑–º–µ–Ω–∏–ª —Ü–µ–Ω—É, —Å–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—É–º–º—É
        update_user_balance(user_id, -price)  # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å –±–∞–ª–∞–Ω—Å–∞

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä –≤ —Ç–∞–±–ª–∏—Ü—É `purchases`
        cursor.execute(
            "INSERT INTO purchases (telegram_id, ip, login, password, cores, ram, ssd, geo, price) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)",
            (user_id, ip, login, password, cores, ram, ssd, geo, price)
        )

        # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        cursor.execute("DELETE FROM products WHERE id = ?", (product_id,))
        conn.commit()
        
        flag = get_flag(geo)
        await callback_query.message.edit_text(
            f"‚úÖ <b>–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!</b>\n\n"
            f"üîπ <b>GEO</b> {geo, flag}\n"
            f"üîπ <b>IP:</b> {ip}\n"
            f"üîπ <b>–õ–æ–≥–∏–Ω:</b> {login}\n"
            f"üîπ <b>–ü–∞—Ä–æ–ª—å:</b> {password}\n"
            f"üîπ <b>{cores} –Ø–¥–µ—Ä | {ram}GB RAM | {ssd}GB SSD</b>**\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> {price}$", reply_markup=back_to_main()
        )
    else:
        await callback_query.message.edit_text(
            "‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.**\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä.",
            reply_markup=back_to_main()
        )
    
    conn.commit()
    
    await callback_query.answer()




@router.message(FSMStates.waiting_for_promo_code)
async def process_promo(message: Message, state: FSMContext):
    user_id = message.from_user.id
    promo_code = message.text.strip()
    
    conn = sqlite3.connect('vds_shop.db')
    cursor = conn.cursor()
    cursor.execute("SELECT discount, usage_limit FROM promo_codes WHERE code = ?", (promo_code,))
    promo = cursor.fetchone()
    
    if promo:
        discount, usage_limit = promo
        if usage_limit > 0:
            cursor.execute("UPDATE users SET promo_code = ? WHERE telegram_id = ?", (promo_code, user_id))
            conn.commit()
            await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {promo_code} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –°–∫–∏–¥–∫–∞: {discount}%.")
        else:
            await message.answer("‚ùå –≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å—á–µ—Ä–ø–∞–Ω.")
    else:
        await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")
    await state.clear()



@router.callback_query(F.data == "back_to_main")
async def back_to_main_callback(callback: CallbackQuery):
    await callback.message.answer(
        "–ü—Ä–∏–≤–µ—Ç—Å—É—Ç—Å–≤—É—é –≤ VDS Market! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–∏ÃÜ—Å—Ç–≤–∏–µ:",
        reply_markup=main_keyboard(callback.from_user.id)
    )
    await callback.answer()