import sqlite3
import uuid
import requests

import config
from payments.currency import get_usd_exchange_rate
def create_db():
    conn = sqlite3.connect("vds_shop.db")
    cursor = conn.cursor()

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegram_id INTEGER UNIQUE,
            balance REAL DEFAULT 0,
            promo_code TEXT DEFAULT NULL
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            ip TEXT,
            login TEXT,
            password TEXT,
            cores INTEGER,
            ram INTEGER,
            ssd INTEGER,
            geo TEXT,  -- –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ geo
            price REAL
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS purchases (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegram_id INTEGER,
            ip TEXT,
            login TEXT,
            password TEXT,
            cores INTEGER,
            ram INTEGER,
            ssd INTEGER,
            geo TEXT,
            price REAL,
            purchase_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS promo_codes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            code TEXT UNIQUE,
            discount REAL,
            usage_limit INTEGER
        )
    ''')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª–µ `geo`, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º
    cursor.execute("PRAGMA table_info(products)")
    columns = [col[1] for col in cursor.fetchall()]
    
    if "geo" not in columns:
        cursor.execute("ALTER TABLE products ADD COLUMN geo TEXT DEFAULT 'N/A'")  # –î–æ–±–∞–≤–ª—è–µ–º geo, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    conn.commit()






def create_user(telegram_id):
    conn = sqlite3.connect('vds_shop.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT id FROM users WHERE telegram_id = ?
    ''', (telegram_id,))
    user = cursor.fetchone()

    if not user:
        cursor.execute('''
            INSERT INTO users (telegram_id, balance) VALUES (?, 0)
        ''', (telegram_id,))
        conn.commit()




def get_user(telegram_id):
    conn = sqlite3.connect('vds_shop.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT telegram_id, balance FROM users WHERE telegram_id = ?
    ''', (telegram_id,))
    user = cursor.fetchone()


    if user:
        return {"telegram_id": user[0], "balance": user[1]}
    return None


def get_user_balance(telegram_id):
    conn = sqlite3.connect("vds_shop.db")
    cursor = conn.cursor()
    cursor.execute("SELECT balance FROM users WHERE telegram_id = ?", (telegram_id,))
    result = cursor.fetchone()
    print(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {result[0]}")
    return result[0] if result else 0

def update_user_balance(telegram_id, amount):
    conn = sqlite3.connect("vds_shop.db")
    cursor = conn.cursor()
    
    try:
        with conn:
            cursor.execute("UPDATE users SET balance = balance + ? WHERE telegram_id = ?", (amount, telegram_id))
        conn.commit()
        print(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {amount}.")
    except sqlite3.OperationalError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
    finally:
        conn.close()





COUNTRY_FLAGS = {
    "US": "üá∫üá∏", "RU": "üá∑üá∫", "DE": "üá©üá™", "FR": "üá´üá∑",
    "GB": "üá¨üáß", "NL": "üá≥üá±", "CA": "üá®üá¶", "AU": "üá¶üá∫",
    "IT": "üáÆüáπ", "ES": "üá™üá∏", "PL": "üáµüá±", "BR": "üáßüá∑",
    "IN": "üáÆüá≥", "JP": "üáØüáµ", "CN": "üá®üá≥", "KR": "üá∞üá∑",
    "MX": "üá≤üáΩ", "AR": "üá¶üá∑", "ZA": "üáøüá¶", "NG": "üá≥üá¨",
    "EG": "üá™üá¨", "TR": "üáπüá∑", "SA": "üá∏üá¶", "AE": "üá¶üá™",
    "ID": "üáÆüá©", "TH": "üáπüá≠", "PH": "üáµüá≠", "SG": "üá∏üá¨",
    "NZ": "üá≥üáø", "FI": "üá´üáÆ", "SE": "üá∏üá™", "NO": "üá≥üá¥",
    "DK": "üá©üá∞", "CH": "üá®üá≠", "BE": "üáßüá™", "AT": "üá¶üáπ",
    "PL": "üáµüá±", "PT": "üáµüáπ", "GR": "üá¨üá∑", "CZ": "üá®üáø",
    "RO": "üá∑üá¥", "HU": "üá≠üá∫", "SK": "üá∏üá∞", "BG": "üáßüá¨",
    "UA": "üá∫üá¶", "KR": "üá∞üá∑", "MY": "üá≤üáæ", "VN": "üáªüá≥",
    "KW": "üá∞üáº", "QA": "üá∂üá¶", "OM": "üá¥üá≤", "KW": "üá∞üáº",
    "IE": "üáÆüá™", "IS": "üáÆüá∏", "LK": "üá±üá∞", "MD": "üá≤üá©"
}


def get_flag(geo):
    return COUNTRY_FLAGS.get(geo, "üè≥Ô∏è")


def get_user_purchase_count(user_id: int) -> int:
    conn = sqlite3.connect("vds_shop.db")
    cursor = conn.cursor()

    cursor.execute("SELECT COUNT(*) FROM purchases WHERE telegram_id = ?", (user_id,))
    count = cursor.fetchone()[0]


    return count


def apply_discount(user_id, price):
    conn = sqlite3.connect("vds_shop.db")
    cursor = conn.cursor()
    cursor.execute("SELECT promo_code FROM users WHERE telegram_id = ?", (user_id,))
    promo_code = cursor.fetchone()
    
    if promo_code and promo_code[0]:
        cursor.execute("SELECT discount FROM promo_codes WHERE code = ?", (promo_code[0],))
        discount = cursor.fetchone()
        if discount:
            price *= (1 - discount[0] / 100)
    
    return round(price, 2)

def apply_promo_code(user_id, price):
    conn = sqlite3.connect('vds_shop.db')
    cursor = conn.cursor()
    cursor.execute("SELECT promo_code FROM users WHERE telegram_id = ?", (user_id,))
    promo_code = cursor.fetchone()
    
    if promo_code and promo_code[0]:
        cursor.execute("SELECT discount, usage_limit FROM promo_codes WHERE code = ?", (promo_code[0],))
        promo = cursor.fetchone()
        if promo:
            discount, usage_limit = promo
            new_price = price - (price * discount / 100)
            
            # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
            cursor.execute("UPDATE promo_codes SET usage_limit = usage_limit - 1 WHERE code = ?", (promo_code[0],))
            
            # –ï—Å–ª–∏ –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω, —É–¥–∞–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
            if usage_limit - 1 <= 0:
                cursor.execute("DELETE FROM promo_codes WHERE code = ?", (promo_code[0],))
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            cursor.execute("UPDATE users SET promo_code = NULL WHERE telegram_id = ?", (user_id,))
            
            conn.commit()
            print(f"–ü—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥: {promo_code[0]}, –Ω–æ–≤–∞—è —Ü–µ–Ω–∞: {new_price}")
            return new_price
    print(f"–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º. –¶–µ–Ω–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {price}")
    return price



def create_payment(amount_rub, user_id):
    usd_rate = get_usd_exchange_rate()
    amount_usd = round(amount_rub * usd_rate, 2)
    
    data = {
        "amount": {"value": f"{amount_rub:.2f}", "currency": "RUB"},
        "confirmation": {"type": "redirect", "return_url": "https://t.me/your_bot"},
        "capture": True,
        "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount_usd} USD"
    }
    
    response = requests.post(
        "https://api.yookassa.ru/v3/payments", json=data,
        auth=(config.YOOKASSA_SHOP_ID, config.YOOKASSA_SECRET_KEY)
    )
    return response.json(), amount_usd

def create_crypto_invoice(amount_usd, currency, user_id):
    data = {
        "amount": amount_usd,
        "currency": "USD",
        "pay_currency": currency,
        "order_id": str(uuid.uuid4()),
        "custom_fields": {"telegram_id": user_id}
    }
    response = requests.post("https://api.cryptomus.com/v1/invoice", json=data, headers={
        "merchant": config.MERCHANT_UUID,
        "sign": config.API_KEY
    })
    return response.json().get("url")
